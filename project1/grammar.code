<define PARSE CODE.Program/>
<define TOKEN (("<" "=") (">" "=") ("[" "]") (":" "=") (":" ":"))/>

<define KEYWORDS (
    ("hd") 
    ("tl") 
    ("ref") 
    ("not") 
    ("and") 
    ("or") 
    ("while") 
    ("do") 
    ("val") 
    ("int") 
    ("real") 
    ("unit") 
    ("bool")
    ("if")
    ("then")
    ("else")
    ("let")
    ("in")
    )/>

<* 
    p:  CODE.Program
    c:  CODE.Sequence
    s:  CODE.Statement
    d:  CODE.Bind
    t:  CODE.TType
    e:  CODE.Expression
    e2: CODE.Update
/*>

<code Program parse=((CODE.Statement CODE.Program) | "")/>
<code ProgramS parse=((CODE.Update ";" CODE.ProgramSH) | (CODE.Bind ";" CODE.ProgramS) | ("while" CODE.Expression "do" CODE.Statement CODE.ProgramS))/>
<code ProgramSH parse=(CODE.Bind ";" CODE.ProgramS)/>

<code Statement parse=(
      (CODE.Update ";")
    | (CODE.Bind ";")
    | ("while" CODE.Expression "do" CODE.Statement))/>

<code Bind parse=("val" ID ":" CODE.TType "=" CODE.Update)/>

<code Sequence parse=((CODE.Bind CODE.SequenceH))/>
<code SequenceH parse=((";" CODE.Bind CODE.SequenceH) | "")/>

<* ************************ /*>
<* BEGIN CODE.Update syntax /*>
<* ************************ /*>

<code Update parse=(("(" CODE.ProgramS CODE.UpdateIf ")") | CODE.UpdateIf)/>
<code UpdateIf parse=(("if" CODE.Expression "then" CODE.UpdateLet CODE.UpdateElse) | CODE.UpdateLet )/>
<code UpdateElse parse=("else" CODE.UpdateLet)/>
<code UpdateLet parse=(("let" CODE.Sequence "in" CODE.Program CODE.UpdateAssign "end")| CODE.UpdateAssign)/>
<code UpdateAssign parse=(CODE.Update | (CODE.Expression CODE.UpdateAssignH))/>
<code UpdateAssignH parse=((":=" CODE.Update) | "")/>

<* ********************** /*>
<* END CODE.Update syntax /*>
<* ********************** /*>


<* **************************** /*>
<* BEGIN CODE.TType syntax /*>
<* **************************** /*>

<code TType parse=(CODE.TListRef CODE.TTypeH)/>
<code TTypeH parse=(("*" CODE.TListRef CODE.TTypeH) | "")/>

<code TListRef parse=(CODE.TBase CODE.TListRefH)/>
<code TListRefH parse=((("ref"|"list") CODE.TListRefH) | "")/>

<code TBase parse=("int"|"real"|"unit"|"bool")/>

<* ************************** /*>
<* END CODE.TType syntax /*>
<* ************************** /*>


<* **************************** /*>
<* BEGIN CODE.Expression syntax /*>
<* **************************** /*>

<code Expression parse=(CODE.BoolH CODE.List)/>
<code List parse=(
    ("," CODE.BoolH CODE.List) 
  | "")/>

<code BoolH parse=(CODE.ComparisonH CODE.Bool)/>
<code Bool parse=(
      ("and" CODE.ComparisonH CODE.Bool) 
    | ("or" CODE.ComparisonH CODE.Bool)
    | "")/>

<code ComparisonH parse=(CODE.AddH CODE.Comparison)/>
<code Comparison parse=(
      ("<" CODE.AddH CODE.Comparison) 
    | (">" CODE.AddH CODE.Comparison)
    | ("=" CODE.AddH CODE.Comparison)
    | ("<=" CODE.AddH CODE.Comparison)
    | (">=" CODE.AddH CODE.Comparison)
    | "")/>

<code AddH parse=(CODE.MulH CODE.Add)/>
<code Add parse=(
      ("+" CODE.MulH CODE.Add) 
    | ("-" CODE.MulH CODE.Add) 
    | "")/>

<code MulH parse=(CODE.ConsH CODE.Mul)/>
<code Mul parse=(
      ("*" CODE.ConsH CODE.Mul) 
    | ("/" CODE.ConsH CODE.Mul) 
    | "")/>

<code ConsH parse=(CODE.Unary CODE.Cons)/>
<code Cons parse=(
      ("::" CODE.Unary CODE.Cons) 
    | "")/>

<code Unary parse=(
      ("-" CODE.Value)
    | ("hd" CODE.Value)
    | ("tl" CODE.Value)
    | ("ref" CODE.Value)
    | ("!" CODE.Value)
    | ("not" CODE.Value)
    | (CODE.Value))/>

<code Value parse=(
      INT
    | FLOAT
    | ID
    | "[]"
    | ("[" CODE.Expression "]")
    | ("(" CODE.Expression ")"))/>

<* ************************** /*>
<* END CODE.Expression syntax /*>
<* ************************** /*>
